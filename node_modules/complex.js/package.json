{
  "_args": [
    [
      {
        "raw": "complex.js@2.0.4",
        "scope": null,
        "escapedName": "complex.js",
        "name": "complex.js",
        "rawSpec": "2.0.4",
        "spec": "2.0.4",
        "type": "version"
      },
      "/Users/jamesftw/Desktop/stupid/ApiDesign/node_modules/mathjs"
    ]
  ],
  "_from": "complex.js@2.0.4",
  "_id": "complex.js@2.0.4",
  "_inCache": true,
  "_location": "/complex.js",
  "_nodeVersion": "8.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/complex.js-2.0.4.tgz_1497430425722_0.32762213004752994"
  },
  "_npmUser": {
    "name": "infusion",
    "email": "robert@xarg.org"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "complex.js@2.0.4",
    "scope": null,
    "escapedName": "complex.js",
    "name": "complex.js",
    "rawSpec": "2.0.4",
    "spec": "2.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/mathjs"
  ],
  "_resolved": "https://registry.npmjs.org/complex.js/-/complex.js-2.0.4.tgz",
  "_shasum": "d8e7cfb9652d1e853e723386421c1a0ca7a48373",
  "_shrinkwrap": null,
  "_spec": "complex.js@2.0.4",
  "_where": "/Users/jamesftw/Desktop/stupid/ApiDesign/node_modules/mathjs",
  "author": {
    "name": "Robert Eisele",
    "email": "robert@xarg.org",
    "url": "http://www.xarg.org/"
  },
  "bugs": {
    "url": "https://github.com/infusion/Complex.js/issues"
  },
  "dependencies": {},
  "description": "A complex number library",
  "devDependencies": {
    "mocha": "*"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "integrity": "sha512-Syl95HpxUTS0QjwNxencZsKukgh1zdS9uXeXX2Us0pHaqBR6kiZZi0AkZ9VpZFwHJyVIUVzI4EumjWdXP3fy6w==",
    "shasum": "d8e7cfb9652d1e853e723386421c1a0ca7a48373",
    "tarball": "https://registry.npmjs.org/complex.js/-/complex.js-2.0.4.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "e08bc3c59c9ef2fc66e761111dba2a9906092dad",
  "homepage": "https://github.com/infusion/Complex.js",
  "keywords": [
    "complex numbers",
    "math",
    "complex",
    "number",
    "calculus",
    "parser",
    "arithmetic"
  ],
  "license": "MIT OR GPL-2.0",
  "main": "complex",
  "maintainers": [
    {
      "name": "infusion",
      "email": "robert@xarg.org"
    }
  ],
  "name": "complex.js",
  "optionalDependencies": {},
  "private": false,
  "readme": "# Complex.js - ℂ in JavaSript\n\n[![NPM Package](https://nodei.co/npm-dl/complex.js.png?months=6&height=1)](https://npmjs.org/package/complex.js)\n\n[![Build Status](https://travis-ci.org/infusion/Complex.js.svg?branch=master)](https://travis-ci.org/infusion/Complex.js)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nComplex.js is a well tested JavaScript library to work with complex number arithmetic in JavaScript. It implements every elementary complex number manipulation function and the API is intentionally similar to [Fraction.js](https://github.com/infusion/Fraction.js). Furthermore, it's the basis of [Polynomial.js](https://github.com/infusion/Polynomial.js) and [Math.js](https://github.com/josdejong/mathjs).\n\n\nExample\n===\n\n```js\nvar Complex = require('complex.js');\n\nvar c = new Complex(\"99.3+8i\");\nc.mul({re: 3, im: 9}).div(4.9).sub(3, 2);\n```\n\nParser\n===\n\nAny function (see below) as well as the constructor of the *Complex* class parses its input like this.\n\nYou can pass either Objects, Doubles or Strings.\n\nObjects\n---\n```javascript\nnew Complex({re: real, im: imaginary});\nnew Complex({arg: angle, abs: radius});\nnew Complex({phi: angle, r: radius});\nnew Complex([real, imaginary]); // Vector/Array syntax\n```\nIf there are other attributes on the passed object, they're not getting preserved and have to be merged manually.\n\nDoubles\n---\n```javascript\nnew Complex(55.4);\n```\n\nStrings\n---\n```javascript\nnew Complex(\"123.45\");\nnew Complex(\"15+3i\");\nnew Complex(\"i\");\n```\n\nTwo arguments\n---\n```javascript\nnew Complex(3, 2); // 3+2i\n```\n\nFunctions\n===\n\nComplex sign()\n---\nReturns the complex sign, defined as the complex number normalized by it's absolute value\n\nComplex add(n)\n---\nAdds another complex number\n\nComplex sub(n)\n---\nSubtracts another complex number\n\nComplex mul(n)\n---\nMultiplies the number with another complex number\n\nComplex div(n)\n---\nDivides the number by another complex number\n\nComplex pow(exp)\n---\nReturns the number raised to the complex exponent\n\nComplex sqrt()\n---\nReturns the complex square root of the number\n\nComplex exp(n)\n---\nReturns `e^n` with complex exponent `n`.\n\nComplex log()\n---\nReturns the natural logarithm (base `E`) of the actual complex number\n\n_Note:_ The logarithm to a different base can be calculated with `z.log().div(Math.log(base))`.\n\ndouble abs()\n---\nCalculates the magnitude of the complex number\n\ndouble arg()\n---\nCalculates the angle of the complex number\n\nComplex inverse()\n---\nCalculates the multiplicative inverse of the complex number (1 / z)\n\nComplex conjugate()\n---\nCalculates the conjugate of the complex number (multiplies the imaginary part with -1)\n\nComplex neg()\n---\nNegates the number (multiplies both the real and imaginary part with -1) in order to get the additive inverse\n\nComplex floor([places=0])\n---\nFloors the complex number parts towards zero\n\nComplex ceil([places=0])\n---\nCeils the complex number parts off zero\n\nComplex round([places=0])\n---\nRounds the complex number parts\n\nboolean equals(n)\n---\nChecks if both numbers are exactly the same\n\nboolean isNaN()\n---\nChecks if the given number is not a number\n\nboolean isFinite()\n---\nChecks if the given number is finite\n\nComplex clone()\n---\nReturns a new Complex instance with the same real and imaginary properties\n\nArray toVector()\n---\nReturns a Vector of the actual complex number with two components\n\nString toString()\n---\nReturns a string representation of the actual number. As of v1.9.0 the output is a bit more human readable\n\n```javascript\nnew Complex(1, 2).toString(); // 1 + 2i\nnew Complex(0, 1).toString(); // i\nnew Complex(9, 0).toString(); // 9\nnew Complex(1, 1).toString(); // 1 + i\n```\n\ndouble valueOf()\n---\nReturns the real part of the number if imaginary part is zero. Otherwise `null`\n\n\nTrigonometric functions\n===\nThe following trigonometric functions are defined on Complex.js:\n\n| Trig | Arcus | Hyperbolic | Arcus-Hyperbolic |\n|------|-------|------------|------------------|\n| sin()  | asin()  | sinh()       | asinh()            |\n| cos()  | acos()  | cosh()       | acosh()            |\n| tan()  | atan()  | tanh()       | atanh()            |\n| cot()  | acot()  | coth()       | acoth()            |\n| sec()  | asec()  | sech()       | asech()            |\n| csc()  | acsc()  | csch()       | acsch()            |\n\n\nGeometric Equivalence\n===\n\nComplex numbers can also be seen as a vector in the 2D space. Here is a simple overview of basic operations and how to implement them with complex.js:\n\nNew vector\n---\n```js\nvar v1 = new Complex(1, 0);\nvar v2 = new Complex(1, 1);\n```\n\nScale vector\n---\n```js\nscale(v1, factor):= v1.mul(factor)\n```\n\nVector norm\n---\n```js\nnorm(v):= v.abs()\n```\n\nTranslate vector\n---\n```js\ntranslate(v1, v2):= v1.add(v2)\n```\n\nRotate vector around center\n---\n```js\nrotate(v, angle):= v.mul({abs: 1, arg: angle})\n```\n\nRotate vector around a point\n---\n```js\nrotate(v, p, angle):= v.sub(p).mul({abs: 1, arg: angle}).add(p)\n```\n\nDistance to another vector\n---\n```js\ndistance(v1, v2):= v1.sub(v2).abs()\n```\n\nConstants\n===\n\nComplex.ZERO\n---\nA complex zero instance\n\nComplex.ONE\n---\nA complex one instance\n\nComplex.I\n---\nAn imaginary number i instance\n\nComplex.PI\n---\nA complex PI instance\n\nComplex.E\n---\nA complex euler number instance\n\nComplex.EPSILON\n---\nA small epsilon value used for `equals()` comparison in order to circumvent double inprecision.\n\n\nInstallation\n===\nInstalling complex.js is as easy as cloning this repo or use one of the following commands:\n\n```bash\nbower install complex.js\n```\nor\n\n```bash\nnpm install complex.js\n```\n\nUsing Complex.js with the browser\n===\n```html\n<script src=\"complex.js\"></script>\n<script>\n    console.log(Complex(\"4+3i\"));\n</script>\n```\n\nUsing Complex.js with require.js\n===\n```html\n<script src=\"require.js\"></script>\n<script>\nrequirejs(['complex.js'],\nfunction(Complex) {\n    console.log(Complex(\"4+3i\"));\n});\n</script>\n```\n\nCoding Style\n===\nAs every library I publish, complex.js is also built to be as small as possible after compressing it with Google Closure Compiler in advanced mode. Thus the coding style orientates a little on maxing-out the compression rate. Please make sure you keep this style if you plan to extend the library.\n\n\nTesting\n===\nIf you plan to enhance the library, make sure you add test cases and all the previous tests are passing. You can test the library with\n\n```bash\nnpm test\n```\n\n\nCopyright and licensing\n===\nCopyright (c) 2015, [Robert Eisele](http://www.xarg.org/)\nDual licensed under the MIT or GPL Version 2 licenses.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/infusion/Complex.js.git"
  },
  "scripts": {
    "test": "mocha tests/*.js"
  },
  "title": "complex.js",
  "version": "2.0.4"
}
